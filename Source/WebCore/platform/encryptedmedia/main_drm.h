#ifndef MAINDRM_H
#define MAINDRM_H

#include <memory>
#include <vector>
#include <string>
#include <string.h>
#include <stddef.h>

#define MAX_LANGUAGE_COUNT 16
#define MAX_LANGUAGE_TAG_LENGTH 32 // <lang>-<role>
//(3+1+1) /* iso639-2 + optional 2..9 digit to disambiguate multiple same-language tracms, + nul terminator */

#define MAX_ERROR_DESCRIPTION_LENGTH 128
#define AD_ID_LENGTH 32
#define MAX_BITRATE_COUNT 10
#define MAX_SUPPORTED_SPEED_COUNT 11 /* [-64, -32, -16, -4, -1, 0, 1, 4, 16, 32, 64] */
#define AAMP_NORMAL_PLAY_RATE 1 /** < Normal Play Rate */
#define MAX_ANOMALY_BUFF_SIZE   256
#define METRIC_UUID_BUFF_LEN  256

/**
 * @brief DRM system types
 */
enum DRMSystems
{
        eDRM_NONE,              /**< No DRM */
        eDRM_WideVine,          /**< Widevine */
        eDRM_PlayReady,         /**< Playready */
        eDRM_CONSEC_agnostic,   /**< CONSEC Agnostic DRM */
        eDRM_Adobe_Access,      /**< Adobe Access */
        eDRM_Vanilla_AES,       /**< Vanilla AES */
        eDRM_ClearKey,          /**< Clear key */
        eDRM_MAX_DRMSystems     /**< Drm system count */
};

/**
 * @brief Media types
 */
enum MediaType
{
        eMEDIATYPE_VIDEO,               /**< Type video */
        eMEDIATYPE_AUDIO,               /**< Type audio */
        eMEDIATYPE_SUBTITLE,            /**< Type subtitle */
        eMEDIATYPE_MANIFEST,            /**< Type manifest */
        eMEDIATYPE_LICENCE,             /**< Type license */
        eMEDIATYPE_IFRAME,              /**< Type iframe */
        eMEDIATYPE_INIT_VIDEO,          /**< Type video init fragment */
        eMEDIATYPE_INIT_AUDIO,          /**< Type audio init fragment */
        eMEDIATYPE_INIT_SUBTITLE,          /**< Type audio init fragment */
        eMEDIATYPE_PLAYLIST_VIDEO,      /**< Type video playlist */
        eMEDIATYPE_PLAYLIST_AUDIO,      /**< Type audio playlist */
        eMEDIATYPE_PLAYLIST_SUBTITLE,   /**< Type subtitle playlist */
        eMEDIATYPE_PLAYLIST_IFRAME,              /**< Type Iframe playlist */
        eMEDIATYPE_INIT_IFRAME,                 /**< Type IFRAME init fragment */
        eMEDIATYPE_DEFAULT              /**< Type unknown */
};

/**
 * @brief Type of the events sending to the JSPP player.
 */
typedef enum
{
        AAMP_EVENT_TUNED = 1,           /**< Tune success*/
        AAMP_EVENT_TUNE_FAILED,         /**< Tune failure*/
        AAMP_EVENT_SPEED_CHANGED,       /**< Speed changed internally*/
        AAMP_EVENT_EOS,                 /**< End of stream*/
        AAMP_EVENT_PLAYLIST_INDEXED,    /**< Playlist downloaded and indexed*/
        AAMP_EVENT_PROGRESS,            /**< Progress event with playback stats. Report interval configurable */
        AAMP_EVENT_CC_HANDLE_RECEIVED,  /**< Sent when video decoder handle retrieved */
        AAMP_EVENT_JS_EVENT,            /**< Generic event generated by JavaScript binding */
        AAMP_EVENT_MEDIA_METADATA,      /**< Meta-data of asset currently playing*/
        AAMP_EVENT_ENTERING_LIVE,       /**< Event when live point reached*/
        AAMP_EVENT_BITRATE_CHANGED,     /**< Event when bitrate changes */
        AAMP_EVENT_TIMED_METADATA,      /**< Meta-data of a subscribed tag parsed from manifest*/
        AAMP_EVENT_BULK_TIMED_METADATA, /**< Bulk Meta-data of a subscribed tag parsed from manifest*/
        AAMP_EVENT_STATE_CHANGED,       /**< Event when player state changes */
        AAMP_EVENT_SPEEDS_CHANGED,      /**< Event when supported playback speeds changes */
//Unified Video Engine API spec
        AAMP_EVENT_SEEKED,              /**< Event when seek completes, including new position*/
        AAMP_EVENT_TUNE_PROFILING,      /**< Event when micro event data sends*/
        AAMP_EVENT_BUFFERING_CHANGED,   /**< Event when buffering starts/ends btw a playback*/
        AAMP_EVENT_DURATION_CHANGED,    /**< Event when duration changed */
        AAMP_EVENT_AUDIO_TRACKS_CHANGED,/**< Event when available audio tracks changes */
        AAMP_EVENT_TEXT_TRACKS_CHANGED, /**< Event when available test tracks changes */
        AAMP_EVENT_AD_BREAKS_CHANGED,   /**< Event when content/ad breaks changes */
        AAMP_EVENT_AD_STARTED,          /**< Ad playback started */
        AAMP_EVENT_AD_COMPLETED,        /**< Ad playback completed */
        AAMP_EVENT_DRM_METADATA,
        AAMP_EVENT_REPORT_ANOMALY,       /**< Playback Anomaly reporting */
        AAMP_EVENT_WEBVTT_CUE_DATA,     /**< WebVTT Cue data */
        AAMP_EVENT_AD_RESOLVED,         /**< Ad fulfill status */
        AAMP_EVENT_AD_RESERVATION_START,/**< Adbreak playback starts */
        AAMP_EVENT_AD_RESERVATION_END,  /**< Adbreak playback ends */
        AAMP_EVENT_AD_PLACEMENT_START,  /**< Ad playback starts */
        AAMP_EVENT_AD_PLACEMENT_END,    /**< Ad playback ends */
        AAMP_EVENT_AD_PLACEMENT_ERROR,  /**< Ad playback error */
        AAMP_EVENT_AD_PLACEMENT_PROGRESS, /**< Ad playback progress */
        AAMP_EVENT_REPORT_METRICS_DATA,       /**< AAMP VideoEnd info reporting */
        AAMP_MAX_NUM_EVENTS
} AAMPEventType;

/**
 * @brief Media output format
 */
enum StreamOutputFormat
{
        FORMAT_INVALID,         /**< Invalid format */
        FORMAT_MPEGTS,          /**< MPEG Transport Stream */
        FORMAT_ISO_BMFF,        /**< ISO Base Media File format */
        FORMAT_AUDIO_ES_AAC,    /**< AAC Audio Elementary Stream */
        FORMAT_AUDIO_ES_AC3,    /**< AC3 Audio Elementary Stream */
        FORMAT_AUDIO_ES_EC3,    /**< Dolby Digital Plus Elementary Stream */
        FORMAT_AUDIO_ES_ATMOS,   /**< ATMOS Audio stream */
        FORMAT_VIDEO_ES_H264,   /**< MPEG-4 Video Elementary Stream */
        FORMAT_VIDEO_ES_HEVC,   /**< HEVC video elementary stream */
        FORMAT_VIDEO_ES_MPEG2,  /**< MPEG-2 Video Elementary Stream */
        FORMAT_SUBTITLE_WEBVTT, /**< WebVTT subtitle Stream */
        FORMAT_NONE             /**< Unknown Format */
};

/**
 *  @brief Auth Token Failure codes
 */
enum AuthTokenErrors {
        eAUTHTOKEN_TOKEN_PARSE_ERROR = -1,
        eAUTHTOKEN_INVALID_STATUS_CODE = -2
};

#endif // MAINAAMP_H

